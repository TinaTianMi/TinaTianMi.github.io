{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?7e02","webpack:///./src/SqlFormatter.vue?81e5","webpack:///./src/components/sqlFormatter/languages/Db2Formatter.js","webpack:///./src/components/sqlFormatter/languages/N1qlFormatter.js","webpack:///./src/components/sqlFormatter/languages/PlSqlFormatter.js","webpack:///./src/components/sqlFormatter/languages/HiveSqlFormatter.js","webpack:///./src/components/sqlFormatter/languages/StandardSqlFormatter.js","webpack:///./src/App.vue?b077","webpack:///./src/SqlFormatter.vue?1ab5","webpack:///./src/components/sqlFormatter/core/tokenTypes.js","webpack:///./src/components/sqlFormatter/core/Indentation.js","webpack:///./src/components/sqlFormatter/core/InlineBlock.js","webpack:///./src/components/sqlFormatter/core/Params.js","webpack:///./src/components/sqlFormatter/core/Formatter.js","webpack:///./src/components/sqlFormatter/core/Tokenizer.js","webpack:///./src/components/sqlFormatter/index.js","webpack:///src/SqlFormatter.vue","webpack:///./src/SqlFormatter.vue?6113","webpack:///./src/SqlFormatter.vue?1ea3","webpack:///src/App.vue","webpack:///./src/App.vue?1160","webpack:///./src/App.vue?bff9","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","tokenizer","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","_m","staticClass","_v","WHITESPACE","WORD","STRING","RESERVED","RESERVED_TOPLEVEL","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","indentTypes","repeat","last","pop","type","INLINE_MAX_LENGTH","InlineBlock","level","tokens","index","isInlineBlock","token","tokenTypes","isForbiddenToken","COMMENT","Params","params","Formatter","cfg","indentation","inlineBlock","previousReservedWord","query","tokenize","formattedQuery","getFormattedQueryFromTokens","trim","forEach","formatLineComment","formatBlockComment","formatToplevelReservedWord","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","formatQuerySeparator","addNewline","indentComment","comment","replace","getIndent","decreaseTopLevel","increaseToplevel","equalizeWhitespace","string","preserveWhitespaceFor","includes","previousToken","trimEnd","language","toLocaleUpperCase","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","trimTrailingWhitespace","test","previousNonWhitespaceToken","offset","Tokenizer","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","createLineCommentRegex","lineCommentTypes","RESERVED_TOPLEVEL_REGEX","createReservedWordRegex","reservedToplevelWords","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","reservedWords","WORD_REGEX","createWordRegex","specialWordChars","STRING_REGEX","createStringRegex","stringTypes","OPEN_PAREN_REGEX","createParenRegex","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","createPlaceholderRegex","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","createStringPattern","RegExp","map","escapeRegExp","join","reservedWordsPattern","specialChars","patterns","parens","escapeParen","paren","types","pattern","isEmpty","typesRegex","input","getNextToken","substring","getWhitespaceToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getTokenOnFirstMatch","regex","getLineCommentToken","getBlockCommentToken","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","getEscapedPlaceholderKey","quoteChar","getToplevelReservedToken","getNewlineReservedToken","getPlainReservedToken","matches","match","Db2Formatter","format","N1qlFormatter","PlSqlFormatter","StandardSqlFormatter","HiveSqlFormatter","undefined","Error","component","components","SqlFormatter","Vue","config","productionTip","use","iView","render","h","App","$mount"],"mappings":"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","file":"js/app.f2202a84.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SqlFormatter.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SqlFormatter.vue?vue&type=style&index=0&lang=css&\"","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n    'ABS', 'ACTIVATE', 'ALIAS', 'ALL', 'ALLOCATE', 'ALLOW', 'ALTER', 'ANY', 'ARE', 'ARRAY', 'AS', 'ASC',\n    'ASENSITIVE', 'ASSOCIATE', 'ASUTIME', 'ASYMMETRIC', 'AT', 'ATOMIC', 'ATTRIBUTES', 'AUDIT', 'AUTHORIZATION', 'AUX', 'AUXILIARY', 'AVG',\n    'BEFORE', 'BEGIN', 'BETWEEN', 'BIGINT', 'BINARY', 'BLOB', 'BOOLEAN', 'BOTH', 'BUFFERPOOL', 'BY',\n    'CACHE', 'CALL', 'CALLED', 'CAPTURE', 'CARDINALITY', 'CASCADED', 'CASE', 'CAST', 'CCSID', 'CEIL', 'CEILING', 'CHAR', 'CHARACTER',\n    'CHARACTER_LENGTH', 'CHAR_LENGTH', 'CHECK', 'CLOB', 'CLONE', 'CLOSE', 'CLUSTER', 'COALESCE', 'COLLATE', 'COLLECT', 'COLLECTION',\n    'COLLID', 'COLUMN', 'COMMENT', 'COMMIT', 'CONCAT', 'CONDITION', 'CONNECT', 'CONNECTION', 'CONSTRAINT', 'CONTAINS', 'CONTINUE',\n    'CONVERT', 'CORR', 'CORRESPONDING', 'COUNT', 'COUNT_BIG', 'COVAR_POP', 'COVAR_SAMP', 'CREATE', 'CROSS', 'CUBE', 'CUME_DIST', 'CURRENT',\n    'CURRENT_DATE', 'CURRENT_DEFAULT_TRANSFORM_GROUP', 'CURRENT_LC_CTYPE', 'CURRENT_PATH', 'CURRENT_ROLE', 'CURRENT_SCHEMA',\n    'CURRENT_SERVER', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_TIMEZONE', 'CURRENT_TRANSFORM_GROUP_FOR_TYPE', 'CURRENT_USER', 'CURSOR',\n    'CYCLE',\n    'DATA', 'DATABASE', 'DATAPARTITIONNAME', 'DATAPARTITIONNUM', 'DATE', 'DAY', 'DAYS', 'DB2GENERAL', 'DB2GENRL', 'DB2SQL', 'DBINFO',\n    'DBPARTITIONNAME', 'DBPARTITIONNUM', 'DEALLOCATE', 'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DEFAULTS', 'DEFINITION', 'DELETE',\n    'DENSERANK', 'DENSE_RANK', 'DEREF', 'DESCRIBE', 'DESCRIPTOR', 'DETERMINISTIC', 'DIAGNOSTICS', 'DISABLE', 'DISALLOW', 'DISCONNECT',\n    'DISTINCT', 'DO', 'DOCUMENT', 'DOUBLE', 'DROP', 'DSSIZE', 'DYNAMIC',\n    'EACH', 'EDITPROC', 'ELEMENT', 'ELSE', 'ELSEIF', 'ENABLE', 'ENCODING', 'ENCRYPTION', 'END', 'END-EXEC', 'ENDING', 'ERASE', 'ESCAPE',\n    'EVERY', 'EXCEPTION', 'EXCLUDING', 'EXCLUSIVE', 'EXEC', 'EXECUTE', 'EXISTS', 'EXIT', 'EXP', 'EXPLAIN', 'EXTENDED', 'EXTERNAL',\n    'EXTRACT',\n    'FALSE', 'FENCED', 'FETCH', 'FIELDPROC', 'FILE', 'FILTER', 'FINAL', 'FIRST', 'FLOAT', 'FLOOR', 'FOR', 'FOREIGN', 'FREE', 'FULL',\n    'FUNCTION', 'FUSION',\n    'GENERAL', 'GENERATED', 'GET', 'GLOBAL', 'GOTO', 'GRANT', 'GRAPHIC', 'GROUP', 'GROUPING',\n    'HANDLER', 'HASH', 'HASHED_VALUE', 'HINT', 'HOLD', 'HOUR', 'HOURS',\n    'IDENTITY', 'IF', 'IMMEDIATE', 'IN', 'INCLUDING', 'INCLUSIVE', 'INCREMENT', 'INDEX', 'INDICATOR', 'INDICATORS', 'INF', 'INFINITY',\n    'INHERIT', 'INNER', 'INOUT', 'INSENSITIVE', 'INSERT', 'INT', 'INTEGER', 'INTEGRITY', 'INTERSECTION', 'INTERVAL', 'INTO',\n    'IS', 'ISOBID', 'ISOLATION', 'ITERATE',\n    'JAR', 'JAVA',\n    'KEEP', 'KEY',\n    'LABEL', 'LANGUAGE', 'LARGE', 'LATERAL', 'LC_CTYPE', 'LEADING', 'LEAVE', 'LEFT', 'LIKE', 'LINKTYPE', 'LN', 'LOCAL',\n    'LOCALDATE', 'LOCALE', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCATOR', 'LOCATORS', 'LOCK', 'LOCKMAX', 'LOCKSIZE', 'LONG', 'LOOP', 'LOWER',\n    'MAINTAINED', 'MATCH', 'MATERIALIZED', 'MAX', 'MAXVALUE', 'MEMBER', 'MERGE', 'METHOD', 'MICROSECOND', 'MICROSECONDS', 'MIN', 'MINUTE',\n    'MINUTES', 'MINVALUE', 'MOD', 'MODE', 'MODIFIES', 'MODULE', 'MONTH', 'MONTHS', 'MULTISET',\n    'NAN', 'NATIONAL', 'NATURAL', 'NCHAR', 'NCLOB', 'NEW', 'NEW_TABLE', 'NEXTVAL', 'NO', 'NOCACHE', 'NOCYCLE', 'NODENAME', 'NODENUMBER',\n    'NOMAXVALUE', 'NOMINVALUE', 'NONE', 'NOORDER', 'NORMALIZE', 'NORMALIZED', 'NOT', 'NULL', 'NULLIF', 'NULLS', 'NUMERIC', 'NUMPARTS',\n    'OBID', 'OCTET_LENGTH', 'OF', 'OFFSET', 'OLD', 'OLD_TABLE', 'ON', 'ONLY', 'OPEN', 'OPTIMIZATION', 'OPTIMIZE', 'OPTION', 'ORDER',\n    'OUT', 'OUTER', 'OVER', 'OVERLAPS', 'OVERLAY', 'OVERRIDING',\n    'PACKAGE', 'PADDED', 'PAGESIZE', 'PARAMETER', 'PART', 'PARTITION', 'PARTITIONED', 'PARTITIONING', 'PARTITIONS', 'PASSWORD', 'PATH',\n    'PERCENTILE_CONT', 'PERCENTILE_DISC', 'PERCENT_RANK', 'PIECESIZE', 'PLAN', 'POSITION', 'POWER', 'PRECISION', 'PREPARE', 'PREVVAL',\n    'PRIMARY', 'PRIQTY', 'PRIVILEGES', 'PROCEDURE', 'PROGRAM', 'PSID', 'PUBLIC',\n    'QUERY', 'QUERYNO',\n    'RANGE', 'RANK', 'READ', 'READS', 'REAL', 'RECOVERY', 'RECURSIVE', 'REF', 'REFERENCES', 'REFERENCING', 'REFRESH', 'REGR_AVGX',\n    'REGR_AVGY', 'REGR_COUNT', 'REGR_INTERCEPT', 'REGR_R2', 'REGR_SLOPE', 'REGR_SXX', 'REGR_SXY', 'REGR_SYY', 'RELEASE', 'RENAME', 'REPEAT',\n    'RESET', 'RESIGNAL', 'RESTART', 'RESTRICT', 'RESULT', 'RESULT_SET_LOCATOR', 'RETURN', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE', 'ROLLBACK',\n    'ROLLUP', 'ROUND_CEILING', 'ROUND_DOWN', 'ROUND_FLOOR', 'ROUND_HALF_DOWN', 'ROUND_HALF_EVEN', 'ROUND_HALF_UP', 'ROUND_UP', 'ROUTINE',\n    'ROW', 'ROWNUMBER', 'ROWS', 'ROWSET', 'ROW_NUMBER', 'RRN', 'RUN',\n    'SAVEPOINT', 'SCHEMA', 'SCOPE', 'SCRATCHPAD', 'SCROLL', 'SEARCH', 'SECOND', 'SECONDS', 'SECQTY', 'SECURITY', 'SENSITIVE',\n    'SEQUENCE', 'SESSION', 'SESSION_USER', 'SIGNAL', 'SIMILAR', 'SIMPLE', 'SMALLINT', 'SNAN', 'SOME', 'SOURCE', 'SPECIFIC',\n    'SPECIFICTYPE', 'SQL', 'SQLEXCEPTION', 'SQLID', 'SQLSTATE', 'SQLWARNING', 'SQRT', 'STACKED', 'STANDARD', 'START', 'STARTING',\n    'STATEMENT', 'STATIC', 'STATMENT', 'STAY', 'STDDEV_POP', 'STDDEV_SAMP', 'STOGROUP', 'STORES', 'STYLE', 'SUBMULTISET', 'SUBSTRING',\n    'SUM', 'SUMMARY', 'SYMMETRIC', 'SYNONYM', 'SYSFUN', 'SYSIBM', 'SYSPROC', 'SYSTEM', 'SYSTEM_USER',\n    'TABLE', 'TABLESAMPLE', 'TABLESPACE', 'THEN', 'TIME', 'TIMESTAMP', 'TIMEZONE_HOUR', 'TIMEZONE_MINUTE', 'TO', 'TRAILING', 'TRANSACTION',\n    'TRANSLATE', 'TRANSLATION', 'TREAT', 'TRIGGER', 'TRIM', 'TRUE', 'TRUNCATE', 'TYPE',\n    'UESCAPE', 'UNDO', 'UNIQUE', 'UNKNOWN', 'UNNEST', 'UNTIL', 'UPPER', 'USAGE', 'USER', 'USING',\n    'VALIDPROC', 'VALUE', 'VARCHAR', 'VARIABLE', 'VARIANT', 'VARYING', 'VAR_POP', 'VAR_SAMP', 'VCAT', 'VERSION', 'VIEW',\n    'VOLATILE', 'VOLUMES', 'WHEN', 'WHENEVER', 'WHILE', 'WIDTH_BUCKET', 'WINDOW', 'WITH', 'WITHIN', 'WITHOUT', 'WLM', 'WRITE',\n    'XMLELEMENT', 'XMLEXISTS', 'XMLNAMESPACES',\n    'YEAR', 'YEARS',\n];\n\nconst reservedToplevelWords = [\n    'ADD', 'AFTER', 'ALTER COLUMN', 'ALTER TABLE',\n    'DELETE FROM',\n    'EXCEPT',\n    'FETCH FIRST', 'FROM',\n    'GROUP BY', 'GO',\n    'HAVING',\n    'INSERT INTO', 'INTERSECT',\n    'LIMIT',\n    'ORDER BY',\n    'SELECT', 'SET CURRENT SCHEMA', 'SET SCHEMA', 'SET',\n    'UNION ALL', 'UPDATE',\n    'VALUES',\n    'WHERE',\n];\n\nconst reservedNewlineWords = [\n    'AND',\n    'CROSS JOIN',\n    'INNER JOIN',\n    'JOIN',\n    'LEFT JOIN', 'LEFT OUTER JOIN',\n    'OR', 'OUTER JOIN',\n    'RIGHT JOIN', 'RIGHT OUTER JOIN',\n];\n\nlet tokenizer;\n\n/**\n *\n */\nexport default class Db2Formatter {\n    /**\n     * @param {Object} cfg Different set of configurations\n     */\n    constructor(cfg) {\n        this.cfg = cfg;\n    }\n\n    /**\n     * Formats DB2 query to make it easier to read\n     *\n     * @param {String} query The DB2 query string\n     * @return {String} formatted string\n     */\n    format(query) {\n        if (!tokenizer) {\n            tokenizer = new Tokenizer({\n                reservedWords,\n                reservedToplevelWords,\n                reservedNewlineWords,\n                stringTypes: [`\"\"`, '\\'\\'', '``', '[]'],\n                openParens: ['('],\n                closeParens: [')'],\n                indexedPlaceholderTypes: ['?'],\n                namedPlaceholderTypes: [':'],\n                lineCommentTypes: ['--'],\n                specialWordChars: ['#', '@'],\n            });\n        }\n        return new Formatter(this.cfg, tokenizer).format(query);\n    }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n    'ALL', 'ALTER', 'ANALYZE', 'AND', 'ANY', 'ARRAY', 'AS', 'ASC',\n    'BEGIN', 'BETWEEN', 'BINARY', 'BOOLEAN', 'BREAK', 'BUCKET', 'BUILD', 'BY',\n    'CALL', 'CASE', 'CAST', 'CLUSTER', 'COLLATE', 'COLLECTION', 'COMMIT', 'CONNECT', 'CONTINUE', 'CORRELATE', 'COVER', 'CREATE',\n    'DATABASE', 'DATASET', 'DATASTORE', 'DECLARE', 'DECREMENT', 'DELETE', 'DERIVED', 'DESC', 'DESCRIBE', 'DISTINCT', 'DO', 'DROP',\n    'EACH', 'ELEMENT', 'ELSE', 'END', 'EVERY', 'EXCEPT', 'EXCLUDE', 'EXECUTE', 'EXISTS', 'EXPLAIN',\n    'FALSE', 'FETCH', 'FIRST', 'FLATTEN', 'FOR', 'FORCE', 'FROM', 'FUNCTION',\n    'GRANT', 'GROUP', 'GSI',\n    'HAVING',\n    'IF', 'IGNORE', 'ILIKE', 'IN', 'INCLUDE', 'INCREMENT', 'INDEX', 'INFER', 'INLINE', 'INNER', 'INSERT', 'INTERSECT', 'INTO', 'IS',\n    'JOIN',\n    'KEY', 'KEYS', 'KEYSPACE', 'KNOWN',\n    'LAST', 'LEFT', 'LET', 'LETTING', 'LIKE', 'LIMIT', 'LSM',\n    'MAP', 'MAPPING', 'MATCHED', 'MATERIALIZED', 'MERGE', 'MINUS', 'MISSING',\n    'NAMESPACE', 'NEST', 'NOT', 'NULL', 'NUMBER',\n    'OBJECT', 'OFFSET', 'ON', 'OPTION', 'OR', 'ORDER', 'OUTER', 'OVER',\n    'PARSE', 'PARTITION', 'PASSWORD', 'PATH', 'POOL', 'PREPARE', 'PRIMARY', 'PRIVATE', 'PRIVILEGE', 'PROCEDURE', 'PUBLIC',\n    'RAW', 'REALM', 'REDUCE', 'RENAME', 'RETURN', 'RETURNING', 'REVOKE', 'RIGHT', 'ROLE', 'ROLLBACK',\n    'SATISFIES', 'SCHEMA', 'SELECT', 'SELF', 'SEMI', 'SET', 'SHOW', 'SOME', 'START', 'STATISTICS', 'STRING', 'SYSTEM',\n    'THEN', 'TO', 'TRANSACTION', 'TRIGGER', 'TRUE', 'TRUNCATE',\n    'UNDER', 'UNION', 'UNIQUE', 'UNKNOWN', 'UNNEST', 'UNSET', 'UPDATE', 'UPSERT', 'USE', 'USER', 'USING',\n    'VALIDATE', 'VALUE', 'VALUED', 'VALUES', 'VIA', 'VIEW',\n    'WHEN', 'WHERE', 'WHILE', 'WITH', 'WITHIN', 'WORK',\n    'XOR',\n];\n\nconst reservedToplevelWords = [\n    'DELETE FROM',\n    'EXCEPT ALL', 'EXCEPT', 'EXPLAIN DELETE FROM', 'EXPLAIN UPDATE', 'EXPLAIN UPSERT',\n    'FROM',\n    'GROUP BY',\n    'HAVING',\n    'INFER', 'INSERT INTO', 'INTERSECT ALL', 'INTERSECT',\n    'LET', 'LIMIT',\n    'MERGE',\n    'NEST',\n    'ORDER BY',\n    'PREPARE',\n    'SELECT', 'SET CURRENT SCHEMA', 'SET SCHEMA', 'SET',\n    'UNION ALL', 'UNION', 'UNNEST', 'UPDATE', 'UPSERT', 'USE KEYS',\n    'VALUES',\n    'WHERE',\n];\n\nconst reservedNewlineWords = [\n    'AND',\n    'INNER JOIN',\n    'JOIN',\n    'LEFT JOIN',\n    'LEFT OUTER JOIN',\n    'OR', 'OUTER JOIN',\n    'RIGHT JOIN', 'RIGHT OUTER JOIN',\n    'XOR',\n];\n\nlet tokenizer;\n\n/**\n *\n */\nexport default class N1qlFormatter {\n    /**\n     * @param {Object} cfg Different set of configurations\n     */\n    constructor(cfg) {\n        this.cfg = cfg;\n    }\n\n    /**\n     * Format the whitespace in a N1QL string to make it easier to read\n     *\n     * @param {String} query The N1QL string\n     * @return {String} formatted string\n     */\n    format(query) {\n        if (!tokenizer) {\n            tokenizer = new Tokenizer({\n                reservedWords,\n                reservedToplevelWords,\n                reservedNewlineWords,\n                stringTypes: [`\"\"`, '\\'\\'', '``'],\n                openParens: ['(', '[', '{'],\n                closeParens: [')', ']', '}'],\n                namedPlaceholderTypes: ['$'],\n                lineCommentTypes: ['#', '--'],\n            });\n        }\n        return new Formatter(this.cfg, tokenizer).format(query);\n    }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n    'A', 'ACCESSIBLE', 'AGENT', 'AGGREGATE', 'ALL', 'ALTER', 'ANY', 'ARRAY', 'AS', 'ASC', 'AT', 'ATTRIBUTE', 'AUTHID', 'AVG',\n    'BETWEEN', 'BFILE_BASE', 'BINARY_INTEGER', 'BINARY', 'BLOB_BASE', 'BLOCK', 'BODY', 'BOOLEAN', 'BOTH', 'BOUND',\n    'BULK', 'BY', 'BYTE',\n    'C', 'CALL', 'CALLING', 'CASCADE', 'CASE', 'CHAR_BASE', 'CHAR', 'CHARACTER', 'CHARSET', 'CHARSETFORM', 'CHARSETID',\n    'CHECK', 'CLOB_BASE', 'CLONE', 'CLOSE', 'CLUSTER', 'CLUSTERS', 'COALESCE', 'COLAUTH', 'COLLECT', 'COLUMNS', 'COMMENT',\n    'COMMIT', 'COMMITTED', 'COMPILED', 'COMPRESS', 'CONNECT', 'CONSTANT', 'CONSTRUCTOR', 'CONTEXT', 'CONTINUE', 'CONVERT',\n    'COUNT', 'CRASH', 'CREATE', 'CREDENTIAL', 'CURRENT', 'CURRVAL', 'CURSOR', 'CUSTOMDATUM',\n    'DANGLING', 'DATA', 'DATE_BASE', 'DATE', 'DAY', 'DECIMAL', 'DEFAULT', 'DEFINE', 'DELETE', 'DESC',\n    'DETERMINISTIC', 'DIRECTORY', 'DISTINCT', 'DO', 'DOUBLE', 'DROP', 'DURATION',\n    'ELEMENT', 'ELSIF', 'EMPTY', 'ESCAPE', 'EXCEPTIONS', 'EXCLUSIVE', 'EXECUTE', 'EXISTS',\n    'EXIT', 'EXTENDS', 'EXTERNAL', 'EXTRACT',\n    'FALSE', 'FETCH', 'FINAL', 'FIRST', 'FIXED', 'FLOAT', 'FOR', 'FORALL', 'FORCE', 'FROM', 'FUNCTION',\n    'GENERAL', 'GOTO', 'GRANT', 'GROUP', 'HASH', 'HEAP', 'HIDDEN', 'HOUR',\n    'IDENTIFIED', 'IF', 'IMMEDIATE', 'IN', 'INCLUDING', 'INDEX', 'INDEXES', 'INDICATOR', 'INDICES', 'INFINITE',\n    'INSTANTIABLE', 'INT', 'INTEGER', 'INTERFACE', 'INTERVAL', 'INTO', 'INVALIDATE', 'IS', 'ISOLATION',\n    'JAVA',\n    'LANGUAGE', 'LARGE', 'LEADING', 'LENGTH', 'LEVEL', 'LIBRARY', 'LIKE', 'LIKE2', 'LIKE4', 'LIKEC', 'LIMITED', 'LOCAL',\n    'LOCK', 'LONG',\n    'MAP', 'MAX', 'MAXLEN', 'MEMBER', 'MERGE', 'MIN', 'MINUS', 'MINUTE', 'MLSLABEL', 'MOD', 'MODE', 'MONTH', 'MULTISET',\n    'NAME', 'NAN', 'NATIONAL', 'NATIVE', 'NATURAL', 'NATURALN', 'NCHAR', 'NEW', 'NEXTVAL', 'NOCOMPRESS', 'NOCOPY', 'NOT',\n    'NOWAIT', 'NULL', 'NULLIF', 'NUMBER_BASE', 'NUMBER',\n    'OBJECT', 'OCICOLL', 'OCIDATE', 'OCIDATETIME', 'OCIDURATION', 'OCIINTERVAL', 'OCILOBLOCATOR', 'OCINUMBER', 'OCIRAW',\n    'OCIREF', 'OCIREFCURSOR', 'OCIROWID', 'OCISTRING', 'OCITYPE', 'OF', 'OLD', 'ON', 'ONLY', 'OPAQUE', 'OPEN', 'OPERATOR',\n    'OPTION', 'ORACLE', 'ORADATA', 'ORDER', 'ORGANIZATION', 'ORLANY', 'ORLVARY', 'OTHERS', 'OUT', 'OVERLAPS',\n    'OVERRIDING',\n    'PACKAGE', 'PARALLEL_ENABLE', 'PARAMETER', 'PARAMETERS', 'PARENT', 'PARTITION', 'PASCAL', 'PCTFREE', 'PIPE', 'PIPELINED',\n    'PLS_INTEGER', 'PLUGGABLE', 'POSITIVE', 'POSITIVEN', 'PRAGMA', 'PRECISION', 'PRIOR', 'PRIVATE', 'PROCEDURE', 'PUBLIC',\n    'RAISE', 'RANGE', 'RAW', 'READ', 'REAL', 'RECORD', 'REF', 'REFERENCE', 'RELEASE', 'RELIES_ON', 'REM', 'REMAINDER',\n    'RENAME', 'RESOURCE', 'RESULT_CACHE', 'RESULT', 'RETURN', 'RETURNING', 'REVERSE', 'REVOKE', 'ROLLBACK', 'ROW', 'ROWID',\n    'ROWNUM', 'ROWTYPE',\n    'SAMPLE', 'SAVE', 'SAVEPOINT', 'SB1', 'SB2', 'SB4', 'SECOND', 'SEGMENT', 'SELF', 'SEPARATE', 'SEQUENCE',\n    'SERIALIZABLE', 'SHARE', 'SHORT', 'SIZE_T', 'SIZE', 'SMALLINT', 'SOME', 'SPACE', 'SPARSE', 'SQL', 'SQLCODE',\n    'SQLDATA', 'SQLERRM', 'SQLNAME', 'SQLSTATE', 'STANDARD', 'START', 'STATIC', 'STDDEV', 'STORED', 'STRING', 'STRUCT',\n    'STYLE', 'SUBMULTISET', 'SUBPARTITION', 'SUBSTITUTABLE', 'SUBTYPE', 'SUCCESSFUL', 'SUM', 'SYNONYM', 'SYSDATE',\n    'TABAUTH', 'TABLE', 'TDO', 'THE', 'THEN', 'TIME', 'TIMESTAMP', 'TIMEZONE_ABBR', 'TIMEZONE_HOUR', 'TIMEZONE_MINUTE',\n    'TIMEZONE_REGION', 'TO', 'TRAILING', 'TRANSACTION', 'TRANSACTIONAL', 'TRIGGER', 'TRUE', 'TRUSTED', 'TYPE',\n    'UB1', 'UB2', 'UB4', 'UID', 'UNDER', 'UNIQUE', 'UNPLUG', 'UNSIGNED', 'UNTRUSTED', 'USE', 'USER', 'USING',\n    'VALIDATE', 'VALIST', 'VALUE', 'VARCHAR', 'VARCHAR2', 'VARIABLE', 'VARIANCE', 'VARRAY', 'VARYING', 'VIEW', 'VIEWS', 'VOID',\n    'WHENEVER', 'WHILE', 'WITH', 'WORK', 'WRAPPED', 'WRITE',\n    'YEAR',\n    'ZONE',\n];\n\nconst reservedToplevelWords = [\n    'ADD', 'ALTER COLUMN', 'ALTER TABLE',\n    'BEGIN',\n    'CONNECT BY',\n    'DECLARE', 'DELETE FROM', 'DELETE',\n    'END', 'EXCEPT', 'EXCEPTION',\n    'FETCH FIRST', 'FROM',\n    'GROUP BY',\n    'HAVING',\n    'INSERT INTO', 'INSERT', 'INTERSECT',\n    'LIMIT', 'LOOP',\n    'MODIFY',\n    'ORDER BY',\n    'SELECT', 'SET CURRENT SCHEMA', 'SET SCHEMA', 'SET', 'START WITH',\n    'UNION ALL', 'UNION', 'UPDATE',\n    'VALUES',\n    'WHERE',\n];\n\nconst reservedNewlineWords = [\n    'AND',\n    'CROSS APPLY', 'CROSS JOIN',\n    'ELSE', 'END',\n    'INNER JOIN',\n    'JOIN',\n    'LEFT JOIN', 'LEFT OUTER JOIN',\n    'OR', 'OUTER APPLY', 'OUTER JOIN',\n    'RIGHT JOIN', 'RIGHT OUTER JOIN',\n    'WHEN',\n    'XOR',\n];\n\nlet tokenizer;\n\n/**\n *\n */\nexport default class PlSqlFormatter {\n    /**\n     * @param {Object} cfg Different set of configurations\n     */\n    constructor(cfg) {\n        this.cfg = cfg;\n    }\n\n    /**\n     * Format the whitespace in a PL/SQL string to make it easier to read\n     *\n     * @param {String} query The PL/SQL string\n     * @return {String} formatted string\n     */\n    format(query) {\n        if (!tokenizer) {\n            tokenizer = new Tokenizer({\n                reservedWords,\n                reservedToplevelWords,\n                reservedNewlineWords,\n                stringTypes: [`\"\"`, 'N\\'\\'', '\\'\\'', '``'],\n                openParens: ['(', 'CASE'],\n                closeParens: [')', 'END'],\n                indexedPlaceholderTypes: ['?'],\n                namedPlaceholderTypes: [':'],\n                lineCommentTypes: ['--'],\n                specialWordChars: ['_', '$', '#', '.', '@'],\n            });\n        }\n        return new Formatter(this.cfg, tokenizer).format(query);\n    }\n}\n","import Formatter from \"../core/Formatter\";\nimport Tokenizer from \"../core/Tokenizer\";\n\nconst reservedWords = [\n    \"ACCESSIBLE\", \"ACTION\", \"AGAINST\", \"AGGREGATE\", \"ALGORITHM\", \"ALL\", \"ALTER\", \"ANALYSE\", \"ANALYZE\", \"AS\", \"ASC\", \"AUTOCOMMIT\",\n    \"AUTO_INCREMENT\",\n    \"BACKUP\", \"BEGIN\", \"BETWEEN\", \"BINLOG\", \"BOTH\",\n    \"CASCADE\", \"CASE\", \"CHANGE\", \"CHANGED\", \"CHARACTER SET\", \"CHARSET\", \"CHECK\", \"CHECKSUM\", \"COLLATE\", \"COLLATION\", \"COLUMN\", \"COLUMNS\",\n    \"COMMENT\", \"COMMIT\", \"COMMITTED\", \"COMPRESSED\", \"CONCURRENT\", \"CONSTRAINT\", \"CONTAINS\", \"CONVERT\", \"CREATE\", \"CROSS\",\n    \"CURRENT_TIMESTAMP\",\n    \"DATABASE\", \"DATABASES\", \"DAY\", \"DAY_HOUR\", \"DAY_MINUTE\", \"DAY_SECOND\", \"DEFAULT\", \"DEFINER\", \"DELAYED\", \"DELETE\", \"DESC\", \"DESCRIBE\",\n    \"DETERMINISTIC\", \"DISTINCT\", \"DISTINCTROW\", \"DIV\", \"DO\", \"DROP\", \"DUMPFILE\", \"DUPLICATE\", \"DYNAMIC\",\n    \"ELSE\", \"ENCLOSED\", \"END\", \"ENGINE\", \"ENGINES\", \"ENGINE_TYPE\", \"ESCAPE\", \"ESCAPED\", \"EVENTS\", \"EXEC\", \"EXECUTE\", \"EXISTS\", \"EXPLAIN\",\n    \"EXTENDED\",\n    \"FAST\", \"FETCH\", \"FIELDS\", \"FILE\", \"FIRST\", \"FIXED\", \"FLUSH\", \"FOR\", \"FORCE\", \"FOREIGN\", \"FULL\", \"FULLTEXT\", \"FUNCTION\",\n    \"GLOBAL\", \"GRANT\", \"GRANTS\", \"GROUP_CONCAT\",\n    \"HEAP\", \"HIGH_PRIORITY\", \"HOSTS\", \"HOUR\", \"HOUR_MINUTE\", \"HOUR_SECOND\",\n    \"IDENTIFIED\", \"IF\", \"IFNULL\", \"IGNORE\", \"IN\", \"INDEX\", \"INDEXES\", \"INFILE\", \"INSERT\", \"INSERT_ID\", \"INSERT_METHOD\", \"INTERVAL\",\n    \"INTO\", \"INVOKER\", \"IS\", \"ISOLATION\",\n    \"KEY\", \"KEYS\", \"KILL\",\n    \"LAST_INSERT_ID\", \"LEADING\", \"LEVEL\", \"LIKE\", \"LINEAR\", \"LINES\", \"LOAD\", \"LOCAL\", \"LOCK\", \"LOCKS\", \"LOGS\", \"LOW_PRIORITY\",\n    \"MARIA\", \"MASTER\", \"MASTER_CONNECT_RETRY\", \"MASTER_HOST\", \"MASTER_LOG_FILE\", \"MATCH\", \"MAX_CONNECTIONS_PER_HOUR\",\n    \"MAX_QUERIES_PER_HOUR\", \"MAX_ROWS\", \"MAX_UPDATES_PER_HOUR\", \"MAX_USER_CONNECTIONS\", \"MEDIUM\", \"MERGE\", \"MINUTE\", \"MINUTE_SECOND\",\n    \"MIN_ROWS\", \"MODE\", \"MODIFY\", \"MONTH\", \"MRG_MYISAM\", \"MYISAM\",\n    \"NAMES\", \"NATURAL\", \"NOT\", \"NOW()\", \"NULL\",\n    \"OFFSET\", \"ON DELETE\", \"ON UPDATE\", \"ON\", \"ONLY\", \"OPEN\", \"OPTIMIZE\", \"OPTION\", \"OPTIONALLY\", \"OUTFILE\",\n    \"PACK_KEYS\", \"PAGE\", \"PARTIAL\", \"PARTITION\", \"PARTITIONS\", \"PASSWORD\", \"PRIMARY\", \"PRIVILEGES\", \"PROCEDURE\", \"PROCESS\", \"PROCESSLIST\",\n    \"PURGE\",\n    \"QUICK\",\n    \"RAID0\", \"RAID_CHUNKS\", \"RAID_CHUNKSIZE\", \"RAID_TYPE\", \"RANGE\", \"READ\", \"READ_ONLY\", \"READ_WRITE\", \"REFERENCES\", \"REGEXP\", \"RELOAD\",\n    \"RENAME\", \"REPAIR\", \"REPEATABLE\", \"REPLACE\", \"REPLICATION\", \"RESET\", \"RESTORE\", \"RESTRICT\", \"RETURN\", \"RETURNS\", \"REVOKE\", \"RLIKE\",\n    \"ROLLBACK\", \"ROW\", \"ROWS\", \"ROW_FORMAT\",\n    \"SECOND\", \"SECURITY\", \"SEPARATOR\", \"SERIALIZABLE\", \"SESSION\", \"SHARE\", \"SHOW\", \"SHUTDOWN\", \"SLAVE\", \"SONAME\", \"SOUNDS\", \"SQL\",\n    \"SQL_AUTO_IS_NULL\", \"SQL_BIG_RESULT\", \"SQL_BIG_SELECTS\", \"SQL_BIG_TABLES\", \"SQL_BUFFER_RESULT\", \"SQL_CACHE\", \"SQL_CALC_FOUND_ROWS\",\n    \"SQL_LOG_BIN\", \"SQL_LOG_OFF\", \"SQL_LOG_UPDATE\", \"SQL_LOW_PRIORITY_UPDATES\", \"SQL_MAX_JOIN_SIZE\", \"SQL_NO_CACHE\",\n    \"SQL_QUOTE_SHOW_CREATE\", \"SQL_SAFE_UPDATES\", \"SQL_SELECT_LIMIT\", \"SQL_SLAVE_SKIP_COUNTER\", \"SQL_SMALL_RESULT\", \"SQL_WARNINGS\",\n    \"START\", \"STARTING\", \"STATUS\", \"STOP\", \"STORAGE\", \"STRAIGHT_JOIN\", \"STRING\", \"STRIPED\", \"SUPER\",\n    \"TABLE\", \"TABLES\", \"TEMPORARY\", \"TERMINATED\", \"THEN\", \"TO\", \"TRAILING\", \"TRANSACTIONAL\", \"TRUE\", \"TRUNCATE\", \"TYPE\", \"TYPES\",\n    \"UNCOMMITTED\", \"UNIQUE\", \"UNLOCK\", \"UNSIGNED\", \"USAGE\", \"USE\", \"USING\",\n    \"VARIABLES\", \"VIEW\", \"WHEN\", \"WITH\", \"WORK\", \"WRITE\",\n    \"YEAR_MONTH\",\n    'SET', \"OR\",// new add\n    \"INSERT OVERWRITE\", // new add\n    \"INSERT\",\n];\n\nconst reservedToplevelWords = [\n    \"ADD\", \"AFTER\", \"ALTER COLUMN\", \"ALTER TABLE\",\n    \"DELETE FROM\",\n    \"EXCEPT\",\n    \"FETCH FIRST\", \"FROM\",\n    \"GROUP BY\", \"GO\",\n    \"HAVING\",\n    // \"INSERT INTO\", \"INSERT\", \"INTERSECT\",\n    \"INSERT INTO\", \"INSERT\", \"INTERSECT\",\n    \"LIMIT\",\n    \"MODIFY\",\n    \"ORDER BY\",\n    \"SELECT\", \"SET CURRENT SCHEMA\", \"SET SCHEMA\", \n    \"UNION ALL\", \"UNION\", \"UPDATE\",\n    \"VALUES\",\n    \"WHERE\",\n];\n\nconst reservedNewlineWords = [\n    \"AND\",\n    \"CROSS APPLY\", \"CROSS JOIN\",\n    \"ELSE\",\n    \"INNER JOIN\",\n    \"JOIN\",\n    \"LEFT JOIN\", \"LEFT OUTER JOIN\",\n    \"OUTER APPLY\", \"OUTER JOIN\",\n    \"RIGHT JOIN\", \"RIGHT OUTER JOIN\",\n    \"WHEN\",\n    \"XOR\",\n    \"PARTITIONED\", // new add\n];\n\nlet tokenizer;\n\nexport default class StandardSqlFormatter {\n    /**\n     * @param {Object} cfg Different set of configurations\n     *  @param {String} cfg.language Query language, default is Standard SQL\n     *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n     *  @param {Object} cfg.params Collection of params for placeholder replacement\n     */\n    constructor(cfg) {\n        this.cfg = cfg;\n    }\n\n    /**\n     * Format the whitespace in a Standard SQL string to make it easier to read\n     *\n     * @param {String} query The Standard SQL string\n     * @return {String} formatted string\n     */\n    format(query) {\n        if (!tokenizer) {\n            tokenizer = new Tokenizer({\n                reservedWords,\n                reservedToplevelWords,\n                reservedNewlineWords,\n                stringTypes: [`\"\"`, \"N''\", \"''\", \"``\", \"[]\"],\n                openParens: [\"(\",\"{\", \"CASE\"],\n                closeParens: [\")\", \"}\", \"END\"],\n                indexedPlaceholderTypes: [\"?\"],\n                namedPlaceholderTypes: [\"@\", \":\",\"$\"],\n                lineCommentTypes: [\"#\", \"--\"],\n                specialWordChars: [\"#\", \"@\"]\n            });\n        }\n        return new Formatter(this.cfg, tokenizer).format(query);\n    }\n}\n","import Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n    'ACCESSIBLE', 'ACTION', 'AGAINST', 'AGGREGATE', 'ALGORITHM', 'ALL', 'ALTER', 'ANALYSE', 'ANALYZE', 'AS', 'ASC', 'AUTOCOMMIT',\n    'AUTO_INCREMENT',\n    'BACKUP', 'BEGIN', 'BETWEEN', 'BINLOG', 'BOTH',\n    'CASCADE', 'CASE', 'CHANGE', 'CHANGED', 'CHARACTER SET', 'CHARSET', 'CHECK', 'CHECKSUM', 'COLLATE', 'COLLATION', 'COLUMN', 'COLUMNS',\n    'COMMENT', 'COMMIT', 'COMMITTED', 'COMPRESSED', 'CONCURRENT', 'CONSTRAINT', 'CONTAINS', 'CONVERT', 'CREATE', 'CROSS',\n    'CURRENT_TIMESTAMP',\n    'DATABASE', 'DATABASES', 'DAY', 'DAY_HOUR', 'DAY_MINUTE', 'DAY_SECOND', 'DEFAULT', 'DEFINER', 'DELAYED', 'DELETE', 'DESC', 'DESCRIBE',\n    'DETERMINISTIC', 'DISTINCT', 'DISTINCTROW', 'DIV', 'DO', 'DROP', 'DUMPFILE', 'DUPLICATE', 'DYNAMIC',\n    'ELSE', 'ENCLOSED', 'END', 'ENGINE', 'ENGINES', 'ENGINE_TYPE', 'ESCAPE', 'ESCAPED', 'EVENTS', 'EXEC', 'EXECUTE', 'EXISTS', 'EXPLAIN',\n    'EXTENDED',\n    'FAST', 'FETCH', 'FIELDS', 'FILE', 'FIRST', 'FIXED', 'FLUSH', 'FOR', 'FORCE', 'FOREIGN', 'FULL', 'FULLTEXT', 'FUNCTION',\n    'GLOBAL', 'GRANT', 'GRANTS', 'GROUP_CONCAT',\n    'HEAP', 'HIGH_PRIORITY', 'HOSTS', 'HOUR', 'HOUR_MINUTE', 'HOUR_SECOND',\n    'IDENTIFIED', 'IF', 'IFNULL', 'IGNORE', 'IN', 'INDEX', 'INDEXES', 'INFILE', 'INSERT', 'INSERT_ID', 'INSERT_METHOD', 'INTERVAL',\n    'INTO', 'INVOKER', 'IS', 'ISOLATION',\n    'KEY', 'KEYS', 'KILL',\n    'LAST_INSERT_ID', 'LEADING', 'LEVEL', 'LIKE', 'LINEAR', 'LINES', 'LOAD', 'LOCAL', 'LOCK', 'LOCKS', 'LOGS', 'LOW_PRIORITY',\n    'MARIA', 'MASTER', 'MASTER_CONNECT_RETRY', 'MASTER_HOST', 'MASTER_LOG_FILE', 'MATCH', 'MAX_CONNECTIONS_PER_HOUR',\n    'MAX_QUERIES_PER_HOUR', 'MAX_ROWS', 'MAX_UPDATES_PER_HOUR', 'MAX_USER_CONNECTIONS', 'MEDIUM', 'MERGE', 'MINUTE', 'MINUTE_SECOND',\n    'MIN_ROWS', 'MODE', 'MODIFY', 'MONTH', 'MRG_MYISAM', 'MYISAM',\n    'NAMES', 'NATURAL', 'NOT', 'NOW()', 'NULL',\n    'OFFSET', 'ON DELETE', 'ON UPDATE', 'ON', 'ONLY', 'OPEN', 'OPTIMIZE', 'OPTION', 'OPTIONALLY', 'OUTFILE',\n    'PACK_KEYS', 'PAGE', 'PARTIAL', 'PARTITION', 'PARTITIONS', 'PASSWORD', 'PRIMARY', 'PRIVILEGES', 'PROCEDURE', 'PROCESS', 'PROCESSLIST',\n    'PURGE',\n    'QUICK',\n    'RAID0', 'RAID_CHUNKS', 'RAID_CHUNKSIZE', 'RAID_TYPE', 'RANGE', 'READ', 'READ_ONLY', 'READ_WRITE', 'REFERENCES', 'REGEXP', 'RELOAD',\n    'RENAME', 'REPAIR', 'REPEATABLE', 'REPLACE', 'REPLICATION', 'RESET', 'RESTORE', 'RESTRICT', 'RETURN', 'RETURNS', 'REVOKE', 'RLIKE',\n    'ROLLBACK', 'ROW', 'ROWS', 'ROW_FORMAT',\n    'SECOND', 'SECURITY', 'SEPARATOR', 'SERIALIZABLE', 'SESSION', 'SHARE', 'SHOW', 'SHUTDOWN', 'SLAVE', 'SONAME', 'SOUNDS', 'SQL',\n    'SQL_AUTO_IS_NULL', 'SQL_BIG_RESULT', 'SQL_BIG_SELECTS', 'SQL_BIG_TABLES', 'SQL_BUFFER_RESULT', 'SQL_CACHE', 'SQL_CALC_FOUND_ROWS',\n    'SQL_LOG_BIN', 'SQL_LOG_OFF', 'SQL_LOG_UPDATE', 'SQL_LOW_PRIORITY_UPDATES', 'SQL_MAX_JOIN_SIZE', 'SQL_NO_CACHE',\n    'SQL_QUOTE_SHOW_CREATE', 'SQL_SAFE_UPDATES', 'SQL_SELECT_LIMIT', 'SQL_SLAVE_SKIP_COUNTER', 'SQL_SMALL_RESULT', 'SQL_WARNINGS',\n    'START', 'STARTING', 'STATUS', 'STOP', 'STORAGE', 'STRAIGHT_JOIN', 'STRING', 'STRIPED', 'SUPER',\n    'TABLE', 'TABLES', 'TEMPORARY', 'TERMINATED', 'THEN', 'TO', 'TRAILING', 'TRANSACTIONAL', 'TRUE', 'TRUNCATE', 'TYPE', 'TYPES',\n    'UNCOMMITTED', 'UNIQUE', 'UNLOCK', 'UNSIGNED', 'USAGE', 'USE', 'USING',\n    'VARIABLES', 'VIEW', 'WHEN', 'WITH', 'WORK', 'WRITE',\n    'YEAR_MONTH',\n];\n\nconst reservedToplevelWords = [\n    'ADD', 'AFTER', 'ALTER COLUMN', 'ALTER TABLE',\n    'DELETE FROM',\n    'EXCEPT',\n    'FETCH FIRST', 'FROM',\n    'GROUP BY', 'GO',\n    'HAVING',\n    'INSERT INTO', 'INSERT', 'INTERSECT',\n    'LIMIT',\n    'MODIFY',\n    'ORDER BY',\n    'SELECT', 'SET CURRENT SCHEMA', 'SET SCHEMA', 'SET',\n    'UNION ALL', 'UNION', 'UPDATE',\n    'VALUES',\n    'WHERE',\n];\n\nconst reservedNewlineWords = [\n    'AND',\n    'CROSS APPLY', 'CROSS JOIN',\n    'ELSE',\n    'INNER JOIN',\n    'JOIN',\n    'LEFT JOIN', 'LEFT OUTER JOIN',\n    'OR', 'OUTER APPLY', 'OUTER JOIN',\n    'RIGHT JOIN', 'RIGHT OUTER JOIN',\n    'WHEN',\n    'XOR',\n];\n\nlet tokenizer;\n\n/**\n *\n */\nexport default class StandardSqlFormatter {\n    /**\n     * @param {Object} cfg Different set of configurations\n     */\n    constructor(cfg) {\n        this.cfg = cfg;\n    }\n\n    /**\n     * Format the whitespace in a Standard SQL string to make it easier to read\n     *\n     * @param {String} query The Standard SQL string\n     * @return {String} formatted string\n     */\n    format(query) {\n        if (!tokenizer) {\n            tokenizer = new Tokenizer({\n                reservedWords,\n                reservedToplevelWords,\n                reservedNewlineWords,\n                stringTypes: [`\"\"`, 'N\\'\\'', '\\'\\'', '``', '[]'],\n                openParens: ['(', 'CASE'],\n                closeParens: [')', 'END'],\n                indexedPlaceholderTypes: ['?'],\n                namedPlaceholderTypes: ['@', ':'],\n                lineCommentTypes: ['#', '--'],\n            });\n        }\n        return new Formatter(this.cfg, tokenizer).format(query);\n    }\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('sql-formatter')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"formatter\"},[_c('div',{staticClass:\"header\"},[_c('div',{staticClass:\"select-wrapper\"},[_vm._v(\" Format \"),_c('select',{attrs:{\"id\":\"language\"}},[_c('option',{attrs:{\"value\":\"hql\"}},[_vm._v(\" HQL \")]),_c('option',{attrs:{\"value\":\"sql\"}},[_vm._v(\" SQL \")]),_c('option',{attrs:{\"value\":\"n1ql\"}},[_vm._v(\" N1QL \")]),_c('option',{attrs:{\"value\":\"db2\"}},[_vm._v(\" DB2 \")]),_c('option',{attrs:{\"value\":\"pl/sql\"}},[_vm._v(\" PL/SQL \")])])])]),_c('div',{staticClass:\"main\"},[_c('section',{staticClass:\"input\"},[_c('textarea',{attrs:{\"id\":\"input\",\"autofocus\":\"true\",\"wrap\":\"off\"}},[_vm._v(\" select supplier_name, city from suppliers where supplier_id > 500 ${ass} ORDER BY supplier_name ASC, city DESC; \")])]),_c('section',{staticClass:\"output\"},[_c('textarea',{attrs:{\"id\":\"output\",\"readonly\":\"true\",\"wrap\":\"off\"}})])])])}]\n\nexport { render, staticRenderFns }","/**\n * Constants for token types\n */\nexport default {\n    WHITESPACE: \"whitespace\",\n    WORD: \"word\",\n    STRING: \"string\",\n    RESERVED: \"reserved\",\n    RESERVED_TOPLEVEL: \"reserved-toplevel\",\n    RESERVED_NEWLINE: \"reserved-newline\",\n    OPERATOR: \"operator\",\n    OPEN_PAREN: \"open-paren\",\n    CLOSE_PAREN: \"close-paren\",\n    LINE_COMMENT: \"line-comment\",\n    BLOCK_COMMENT: \"block-comment\",\n    NUMBER: \"number\",\n    PLACEHOLDER: \"placeholder\"\n};\n","import repeat from 'lodash/repeat';\nimport last from 'lodash/last';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOPLEVEL words\n */\nexport default class Indentation {\n    /**\n     * @param {String} indent Indent value, default is \"  \" (2 spaces)\n     */\n    constructor(indent) {\n        this.indent = indent || '  ';\n        this.indentTypes = [];\n    }\n\n    /**\n     * Returns current indentation string.\n     * @return {String}\n     */\n    getIndent() {\n        return repeat(this.indent, this.indentTypes.length);\n    }\n\n    /**\n     * Increases indentation by one top-level indent.\n     */\n    increaseToplevel() {\n        this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n    }\n\n    /**\n     * Increases indentation by one block-level indent.\n     */\n    increaseBlockLevel() {\n        this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n    }\n\n    /**\n     * Decreases indentation by one top-level indent.\n     * Does nothing when the previous indent is not top-level.\n     */\n    decreaseTopLevel() {\n        if (last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n            this.indentTypes.pop();\n        }\n    }\n\n    /**\n     * Decreases indentation by one block-level indent.\n     * If there are top-level indents within the block-level indent,\n     * throws away these as well.\n     */\n    decreaseBlockLevel() {\n        while (this.indentTypes.length > 0) {\n            const type = this.indentTypes.pop();\n            if (type !== INDENT_TYPE_TOP_LEVEL) {\n                break;\n            }\n        }\n    }\n}\n","import tokenTypes from './tokenTypes';\n\nconst INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n    /**\n     *\n     */\n    constructor() {\n        this.level = 0;\n    }\n\n    /**\n     * Begins inline block when lookahead through upcoming tokens determines\n     * that the block would be smaller than INLINE_MAX_LENGTH.\n     * @param  {Object[]} tokens Array of all tokens\n     * @param  {Number} index Current token position\n     */\n    beginIfPossible(tokens, index) {\n        if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n            this.level = 1;\n        } else if (this.level > 0) {\n            this.level++;\n        } else {\n            this.level = 0;\n        }\n    }\n\n    /**\n     * Finishes current inline block.\n     * There might be several nested ones.\n     */\n    end() {\n        this.level--;\n    }\n\n    /**\n     * True when inside an inline block\n     * @return {Boolean}\n     */\n    isActive() {\n        return this.level > 0;\n    }\n\n    /**\n     * Check if this should be an inline parentheses block\n     * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n     * @param {*} tokens\n     * @param {*} index\n     * @return {*}\n     */\n    isInlineBlock(tokens, index) {\n        let length = 0;\n        let level = 0;\n\n        for (let i = index; i < tokens.length; i++) {\n            const token = tokens[i];\n            length += token.value.length;\n\n            // Overran max length\n            if (length > INLINE_MAX_LENGTH) {\n                return false;\n            }\n\n            if (token.type === tokenTypes.OPEN_PAREN) {\n                level++;\n            } else if (token.type === tokenTypes.CLOSE_PAREN) {\n                level--;\n                if (level === 0) {\n                    return true;\n                }\n            }\n\n            if (this.isForbiddenToken(token)) {\n                return false;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Reserved words that cause newlines, comments and semicolons\n     * are not allowed inside inline parentheses block\n     * @param {*} param0\n     * @return {*}\n     */\n    isForbiddenToken({ type, value }) {\n        return type === tokenTypes.RESERVED_TOPLEVEL ||\n            type === tokenTypes.RESERVED_NEWLINE ||\n            type === tokenTypes.COMMENT ||\n            type === tokenTypes.BLOCK_COMMENT ||\n            value === ';';\n    }\n}\n","/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n    /**\n     * @param {Object} params\n     */\n    constructor(params) {\n        this.params = params;\n        this.index = 0;\n    }\n\n    /**\n     * Returns param value that matches given placeholder with param key.\n     * @param {Object} token\n     *   @param {String} token.key Placeholder key\n     *   @param {String} token.value Placeholder value\n     * @return {String} param or token.value when params are missing\n     */\n    get({ key, value }) {\n        if (!this.params) {\n            return value;\n        }\n        if (key) {\n            return this.params[key];\n        }\n        return this.params[this.index++];\n    }\n}\n","import includes from \"lodash/includes\";\nimport trimEnd from \"lodash/trimEnd\";\nimport tokenTypes from \"./tokenTypes\";\nimport Indentation from \"./Indentation\";\nimport InlineBlock from \"./InlineBlock\";\nimport Params from \"./Params\";\n\nexport default class Formatter {\n    /**\n     * @param {Object} cfg\n     *   @param {Object} cfg.language\n     *   @param {Object} cfg.indent\n     *   @param {Object} cfg.params\n     * @param {Tokenizer} tokenizer\n     */\n    constructor(cfg, tokenizer) {\n        this.cfg = cfg || {};\n        this.indentation = new Indentation(this.cfg.indent);\n        this.inlineBlock = new InlineBlock();\n        this.params = new Params(this.cfg.params);\n        this.tokenizer = tokenizer;\n        this.previousReservedWord = {};\n        this.tokens = [];\n        this.index = 0;\n    }\n\n    /**\n     * Formats whitespaces in a SQL string to make it easier to read.\n     *\n     * @param {String} query The SQL query string\n     * @return {String} formatted query\n     */\n    format(query) {\n        this.tokens = this.tokenizer.tokenize(query);\n        const formattedQuery = this.getFormattedQueryFromTokens();\n\n        return formattedQuery.trim();\n    }\n\n    getFormattedQueryFromTokens() {\n        let formattedQuery = \"\";\n\n        this.tokens.forEach((token, index) => {\n            this.index = index;\n\n            if (token.type === tokenTypes.WHITESPACE) {\n                // ignore (we do our own whitespace formatting)\n            }\n            else if (token.type === tokenTypes.LINE_COMMENT) {\n                formattedQuery = this.formatLineComment(token, formattedQuery);\n            }\n            else if (token.type === tokenTypes.BLOCK_COMMENT) {\n                formattedQuery = this.formatBlockComment(token, formattedQuery);\n            }\n            else if (token.type === tokenTypes.RESERVED_TOPLEVEL) {\n                formattedQuery = this.formatToplevelReservedWord(token, formattedQuery);\n                this.previousReservedWord = token;\n            }\n            else if (token.type === tokenTypes.RESERVED_NEWLINE) {\n                formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);\n                this.previousReservedWord = token;\n            }\n            else if (token.type === tokenTypes.RESERVED) {\n                formattedQuery = this.formatWithSpaces(token, formattedQuery);\n                this.previousReservedWord = token;\n            }\n            else if (token.type === tokenTypes.OPEN_PAREN) {\n                formattedQuery = this.formatOpeningParentheses(token, formattedQuery);\n            }\n            else if (token.type === tokenTypes.CLOSE_PAREN) {\n                formattedQuery = this.formatClosingParentheses(token, formattedQuery);\n            }\n            else if (token.type === tokenTypes.PLACEHOLDER) {\n                formattedQuery = this.formatPlaceholder(token, formattedQuery);\n            }\n            else if (token.value === \",\") {\n                formattedQuery = this.formatComma(token, formattedQuery);\n            }\n            else if (token.value === \":\") {\n                formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);\n            }\n            else if (token.value === \".\") {\n                formattedQuery = this.formatWithoutSpaces(token, formattedQuery);\n            }\n            else if (token.value === \";\") {\n                formattedQuery = this.formatQuerySeparator(token, formattedQuery);\n            }\n            else {\n                formattedQuery = this.formatWithSpaces(token, formattedQuery);\n            }\n        });\n        return formattedQuery;\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatLineComment(token, query) {\n        return this.addNewline(query + token.value);\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatBlockComment(token, query) {\n        return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n    }\n\n    /**\n     *\n     * @param {*} comment\n     * @return {*}\n     */\n    indentComment(comment) {\n        return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatToplevelReservedWord(token, query) {\n        this.indentation.decreaseTopLevel();\n\n        query = this.addNewline(query);\n\n        this.indentation.increaseToplevel();\n\n        query += this.equalizeWhitespace(token.value);\n        return this.addNewline(query);\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatNewlineReservedWord(token, query) {\n        return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n    }\n\n    /**\n     * Replace any sequence of whitespace characters with single space  处理字符串内的空格\n     * @param {*} string\n     * @return {*}\n     */\n    equalizeWhitespace(string) {\n        return string.replace(/\\s+/g, \" \");\n    }\n\n    /**\n     * Opening parentheses increase the block indent level and start a new line\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatOpeningParentheses(token, query) {\n        // Take out the preceding space unless there was whitespace there in the original query\n        // or another opening parens or line comment\n        const preserveWhitespaceFor = [\n            tokenTypes.WHITESPACE,\n            tokenTypes.OPEN_PAREN,\n            tokenTypes.LINE_COMMENT,\n        ];\n        if (!includes(preserveWhitespaceFor, this.previousToken().type)) {\n            query = trimEnd(query);\n        }\n        // hql 的 CASE 要做换行处理\n        if(this.cfg.language === 'hql' && token.value.toLocaleUpperCase() === 'CASE'){\n            query = this.formatNewlineReservedWord(token, query);\n        }else{\n            query +=  token.value;\n        }\n\n        this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n        if (!this.inlineBlock.isActive()) {\n            this.indentation.increaseBlockLevel();\n            query = this.addNewline(query);\n        }\n        return query;\n    }\n\n    /**\n     * Closing parentheses decrease the block indent level\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatClosingParentheses(token, query) {\n        if (this.inlineBlock.isActive()) {\n            this.inlineBlock.end();\n            return this.formatWithSpaceAfter(token, query);\n        }\n        else {\n            this.indentation.decreaseBlockLevel();\n            return this.formatWithSpaces(token, this.addNewline(query));\n        }\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatPlaceholder(token, query) {\n        return query + this.params.get(token) + \" \";\n    }\n\n    /**\n     * Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatComma(token, query) {\n        query = this.trimTrailingWhitespace(query) + token.value + ' ';\n\n        if (this.inlineBlock.isActive()) {\n            return query;\n        }\n        else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n            return query;\n        }\n        else {\n            return this.addNewline(query);\n        }\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatWithSpaceAfter(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \" \";\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatWithoutSpaces(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value;\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatWithSpaces(token, query) {\n        return query + token.value + \" \";\n    }\n\n    /**\n     *\n     * @param {*} token\n     * @param {*} query\n     * @return {*}\n     */\n    formatQuerySeparator(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \"\\n\";\n    }\n\n    /**\n     *\n     * @param {*} query\n     * @return {*}\n     */\n    addNewline(query) {\n        return trimEnd(query) + \"\\n\" + this.indentation.getIndent();\n    }\n\n    /**\n     *\n     * @param {*} query\n     * @return {*}\n     */\n    trimTrailingWhitespace(query) {\n        if (this.previousNonWhitespaceToken().type === tokenTypes.LINE_COMMENT) {\n            return trimEnd(query) + \"\\n\";\n        }\n        else {\n            return trimEnd(query);\n        }\n    }\n\n    /**\n     *\n     * @param {*} query\n     * @return {*}\n     */\n    previousNonWhitespaceToken() {\n        let n = 1;\n        while (this.previousToken(n).type === tokenTypes.WHITESPACE) {\n            n++;\n        }\n        return this.previousToken(n);\n    }\n\n    /**\n     *\n     * @param {*} offset\n     * @return {*}\n     */\n    previousToken(offset = 1) {\n        return this.tokens[this.index - offset] || {};\n    }\n}\n","import isEmpty from \"lodash/isEmpty\";\nimport escapeRegExp from \"lodash/escapeRegExp\"; // 转义 RegExp 字符串中特殊的字符 \"^\", \"$\", \"\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", 和 \"|\" in .\nimport tokenTypes from \"./tokenTypes\";\n\nexport default class Tokenizer {\n    /**\n     * @param {Object} cfg\n     *  @param {String[]} cfg.reservedWords Reserved words in SQL\n     *  @param {String[]} cfg.reservedToplevelWords Words that are set to new line separately\n     *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n     *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n     *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n     *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n     *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n     *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n     *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n     *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n     */\n    constructor(cfg) {\n        this.WHITESPACE_REGEX = /^(\\s+)/;\n        this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?([Ee][+-]?[\\d]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n        this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n        this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n        this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n        this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(cfg.reservedToplevelWords);\n        this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(cfg.reservedNewlineWords);\n        this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n        this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n        this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n        this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n        this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n        this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.indexedPlaceholderTypes, \"[0-9]*\");\n        this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, \"[a-zA-Z0-9._$]+\");\n        this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(\n            cfg.namedPlaceholderTypes,\n            this.createStringPattern(cfg.stringTypes)\n        );\n\n        // window.console.log(this.LINE_COMMENT_REGEX)\n        // window.console.log(this.RESERVED_TOPLEVEL_REGEX)\n        // window.console.log(this.RESERVED_NEWLINE_REGEX)\n        // window.console.log(this.RESERVED_PLAIN_REGEX)\n        // window.console.log(this.WORD_REGEX)\n        // window.console.log(this.STRING_REGEX)\n        // window.console.log(this.OPEN_PAREN_REGEX)\n        // window.console.log(this.CLOSE_PAREN_REGEX)\n        // window.console.log(this.INDEXED_PLACEHOLDER_REGEX)\n        // window.console.log(this.IDENT_NAMED_PLACEHOLDER_REGEX)\n        // window.console.log(this.STRING_NAMED_PLACEHOLDER_REGEX)\n    }\n\n     /**\n     *\n     * @param {*} lineCommentTypes\n     * @return {*}\n     */\n    createLineCommentRegex(lineCommentTypes) {\n        return new RegExp(`^((?:${lineCommentTypes.map(c => escapeRegExp(c)).join(\"|\")}).*?(?:\\n|$))`);\n    }\n\n    /**\n     *\n     * @param {*} reservedWords\n     * @return {*}\n     */\n    createReservedWordRegex(reservedWords) {\n        const reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n        return new RegExp(`^(${reservedWordsPattern})\\\\b`, \"i\");\n    }\n\n    /**\n     *\n     * @param {*} specialChars\n     * @return {*}\n     */\n    createWordRegex(specialChars = []) {\n        return new RegExp(`^([\\\\w${specialChars.join(\"\")}]+)`);\n    }\n\n    /**\n     *\n     * @param {*} stringTypes\n     * @return {*}\n     */\n    createStringRegex(stringTypes) {\n        return new RegExp(\n            \"^(\" + this.createStringPattern(stringTypes) + \")\"\n        );\n    }\n\n    /**\n     * This enables the following string patterns:\n     * 1.backtick quoted string using `` to escape\n     * 2.square bracket quoted string (SQL Server) using ]] to escape\n     * 3.double quoted string using \"\" or \\\" to escape\n     * 4.single quoted string using '' or \\' to escape\n     * 5.national character quoted string using N'' or N\\' to escape\n     * @param {*} stringTypes\n     * @return {*}\n     */\n    createStringPattern(stringTypes) {\n        const patterns = {\n            \"``\": \"((`[^`]*($|`))+)\",\n            \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n            \"\\\"\\\"\": \"((\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*(\\\"|$))+)\",\n            \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n            \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\",\n        };\n\n        return stringTypes.map(t => patterns[t]).join(\"|\");\n    }\n\n    /**\n     *\n     * @param {*} parens\n     * @return {*}\n     */\n    createParenRegex(parens) {\n        return new RegExp(\n            \"^(\" + parens.map(p => this.escapeParen(p)).join(\"|\") + \")\",\n            \"i\"\n        );\n    }\n\n    /**\n     *\n     * @param {*} paren\n     * @return {*}\n     */\n    escapeParen(paren) {\n        if (paren.length === 1) {\n            // A single punctuation character\n            return escapeRegExp(paren);\n        }\n        else {\n            // longer word\n            return \"\\\\b\" + paren + \"\\\\b\";\n        }\n    }\n\n    /**\n     *\n     * @param {*} types\n     * @param {*} pattern\n     * @return {*}\n     */\n    createPlaceholderRegex(types, pattern) {\n        if (isEmpty(types)) {\n            return false;\n        }\n        const typesRegex = types.map(escapeRegExp).join(\"|\");\n\n        return new RegExp(`^((?:${typesRegex})(?:${pattern}))`);\n    }\n\n    /**\n     * Takes a SQL string and breaks it into tokens.\n     * Each token is an object with type and value.\n     *\n     * @param {String} input The SQL string\n     * @return {Object[]} tokens An array of tokens.\n     *  @return {String} token.type\n     *  @return {String} token.value\n     */\n    tokenize(input) {\n        const tokens = [];\n        let token;\n\n        // Keep processing the string until it is empty\n        while (input.length) {\n            // Get the next token and the token type\n            token = this.getNextToken(input, token);\n            // Advance the string\n            input = input.substring(token.value.length);\n\n            tokens.push(token);\n        }\n        return tokens;\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @param {*} previousToken\n     * @return {*}\n     */\n    getNextToken(input, previousToken) {\n        return this.getWhitespaceToken(input) ||\n            this.getCommentToken(input) ||\n            this.getStringToken(input) ||\n            this.getOpenParenToken(input) ||\n            this.getCloseParenToken(input) ||\n            this.getPlaceholderToken(input) ||\n            this.getNumberToken(input) ||\n            this.getReservedWordToken(input, previousToken) ||\n            this.getWordToken(input) ||\n            this.getOperatorToken(input);\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getWhitespaceToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.WHITESPACE,\n            regex: this.WHITESPACE_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getCommentToken(input) {\n        return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getLineCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.LINE_COMMENT,\n            regex: this.LINE_COMMENT_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getBlockCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.BLOCK_COMMENT,\n            regex: this.BLOCK_COMMENT_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getStringToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.STRING,\n            regex: this.STRING_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getOpenParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input.toLocaleUpperCase(),\n            // input,\n            type: tokenTypes.OPEN_PAREN,\n            regex: this.OPEN_PAREN_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getCloseParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input.toLocaleUpperCase(),\n            // input,\n            type: tokenTypes.CLOSE_PAREN,\n            regex: this.CLOSE_PAREN_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getPlaceholderToken(input) {\n        return this.getIdentNamedPlaceholderToken(input) ||\n            this.getStringNamedPlaceholderToken(input) ||\n            this.getIndexedPlaceholderToken(input);\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getIdentNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input,\n            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n            parseKey: (v) => v.slice(1)\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getStringNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input,\n            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n            parseKey: (v) => this.getEscapedPlaceholderKey({key: v.slice(2, -1), quoteChar: v.slice(-1)})\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getIndexedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input,\n            regex: this.INDEXED_PLACEHOLDER_REGEX,\n            parseKey: (v) => v.slice(1)\n        });\n    }\n\n    /**\n     *\n     * @param {*} param0\n     * @return {*}\n     */\n    getPlaceholderTokenWithKey({input, regex, parseKey}) {\n        const token = this.getTokenOnFirstMatch({input, regex, type: tokenTypes.PLACEHOLDER});\n        if (token) {\n            token.key = parseKey(token.value);\n        }\n        return token;\n    }\n\n    /**\n     *\n     * @param {*} param0\n     * @return {*}\n     */\n    getEscapedPlaceholderKey({key, quoteChar}) {\n        return key.replace(new RegExp(escapeRegExp(\"\\\\\") + quoteChar, \"g\"), quoteChar);\n    }\n\n    /**\n    * Decimal, binary, or hex numbers\n    * @param {*} input\n    * @return {*}\n    */\n    getNumberToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.NUMBER,\n            regex: this.NUMBER_REGEX\n        });\n    }\n\n    /**\n     * Punctuation and symbols\n     * @param {*} input\n     * @return {*}\n     */\n    getOperatorToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.OPERATOR,\n            regex: this.OPERATOR_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @param {*} previousToken\n     * @return {*}\n     */\n    getReservedWordToken(input, previousToken) {\n        // A reserved word cannot be preceded by a \".\"\n        // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n        if (previousToken && previousToken.value && previousToken.value === \".\") {\n            return;\n        }\n        return this.getToplevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getPlainReservedToken(input);\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getToplevelReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input.toLocaleUpperCase(),\n            // input,\n            type: tokenTypes.RESERVED_TOPLEVEL,\n            regex: this.RESERVED_TOPLEVEL_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getNewlineReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input.toLocaleUpperCase(),\n            // input,\n            type: tokenTypes.RESERVED_NEWLINE,\n            regex: this.RESERVED_NEWLINE_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getPlainReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input.toLocaleUpperCase(),\n            // input,\n            type: tokenTypes.RESERVED,\n            regex: this.RESERVED_PLAIN_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} input\n     * @return {*}\n     */\n    getWordToken(input) {\n        return this.getTokenOnFirstMatch({\n            input,\n            type: tokenTypes.WORD,\n            regex: this.WORD_REGEX\n        });\n    }\n\n    /**\n     *\n     * @param {*} param0\n     * @return {*}\n     */\n    getTokenOnFirstMatch({input, type, regex}) {\n        const matches = input.match(regex);\n\n        if (matches) {\n            return {type, value: matches[1]};\n        }\n    }\n}\n","import Db2Formatter from \"./languages/Db2Formatter\";\nimport N1qlFormatter from \"./languages/N1qlFormatter\";\nimport PlSqlFormatter from \"./languages/PlSqlFormatter\";\nimport HiveSqlFormatter from \"./languages/HiveSqlFormatter\";\nimport StandardSqlFormatter from \"./languages/StandardSqlFormatter\";\n\nexport default {\n    /**\n     * Format whitespaces in a query to make it easier to read.\n     *\n     * @param {String} query\n     * @param {Object} cfg\n     *  @param {String} cfg.language Query language, default is Standard SQL\n     *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n     *  @param {Object} cfg.params Collection of params for placeholder replacement\n     * @return {String}\n     */\n    format: (query, cfg) => {\n        cfg = cfg || {};\n\n        switch (cfg.language) {\n            case \"db2\":\n                return new Db2Formatter(cfg).format(query);\n            case \"n1ql\":\n                return new N1qlFormatter(cfg).format(query);\n            case \"pl/sql\":\n                return new PlSqlFormatter(cfg).format(query);\n            case \"hql\":\n                return new HiveSqlFormatter(cfg).format(query);\n            case \"sql\":\n            case undefined:\n                return new StandardSqlFormatter(cfg).format(query);\n            default:\n                throw Error(`Unsupported SQL dialect: ${cfg.language}`);\n        }\n    }\n};\n","<template>\n  <div class=\"formatter\">\n        <div class=\"header\">\n            <div class=\"select-wrapper\">\n                Format\n                <select id=\"language\">\n                    <option value=\"hql\">\n                        HQL\n                    </option>\n                    <option value=\"sql\">\n                        SQL\n                    </option>\n                    <option value=\"n1ql\">\n                        N1QL\n                    </option>\n                    <option value=\"db2\">\n                        DB2\n                    </option>\n                    <option value=\"pl/sql\">\n                        PL/SQL\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"main\">\n            <section class=\"input\">\n                <textarea id=\"input\" autofocus=\"true\" wrap=\"off\">\n                    select supplier_name, city from suppliers&#10;where supplier_id > 500&#10; ${ass} ORDER BY supplier_name ASC, city DESC;\n                    </textarea>\n            </section>\n            <section class=\"output\">\n                <textarea id=\"output\" readonly=\"true\" wrap=\"off\"></textarea>\n            </section>\n        </div>\n  </div>\n</template>\n\n<script>\nimport sqlFormatter from \"./components/sqlFormatter/index.js\";\n\nexport default {\n    data(){\n        return { \n            formItem: {\n                textarea: '',\n            }\n        }\n    },\n    mounted(){\n        this.init()\n    },\n\n    methods: {\n        init(){\n            let language = document.getElementById('language');\n            let input = document.getElementById('input');\n            let output = document.getElementById('output');\n\n            input.addEventListener('input', format);\n            language.addEventListener('change', format);\n\n            function format() {\n                window.console.time('formatting');\n\n                output.value = sqlFormatter.format(input.value, {language: language.options[language.selectedIndex].value, params: 'hahaha'});\n\n                window.console.timeEnd('formatting');\n            }\n            format()\n        }\n    },\n\n\n}\n</script>\n\n<style>\n.formatter {\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            padding: 0;\n            overflow: hidden;\n            font-family: 'Roboto Mono', monospace;\n        }\n        .header {\n            position: relative;\n            height: 120px;\n            padding: 10px 20px;\n            border-bottom: 2px solid #8DC63F;\n            box-sizing: border-box;\n        }\n        .select-wrapper {\n            position: absolute;\n            bottom: 0;\n            left: 50%;\n            transform: translate(-50%, -50%);\n        }\n        h1 {\n            margin: 0 0 8px 0;\n        }\n        a {\n            text-decoration: none;\n        }\n        .main {\n            overflow: hidden;\n            display: flex;\n            flex-direction: row;\n            -webkit-align-items: stretch;\n            align-items: stretch;\n            height: calc(100% - 120px);\n        }\n        .input, .output {\n            display: flex;\n            -webkit-align-items: stretch;\n            align-items: stretch;\n            width: 50%;\n            height: 100%;\n        }\n        .output {\n            border-left: 2px solid #8DC63F;\n        }\n        textarea {\n            width: 100%;\n            padding: 20px;\n            border: 0;\n            box-sizing: border-box;\n            font-size: 1.3em;\n            resize: none;\n            outline: none;\n            line-height: 1.3;\n            font-family: 'Roboto Mono', monospace;\n        }\n</style>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SqlFormatter.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./SqlFormatter.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./SqlFormatter.vue?vue&type=template&id=035f40c6&\"\nimport script from \"./SqlFormatter.vue?vue&type=script&lang=js&\"\nexport * from \"./SqlFormatter.vue?vue&type=script&lang=js&\"\nimport style0 from \"./SqlFormatter.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\">\n    <sql-formatter/>\n  </div>\n</template>\n\n<script>\nimport SqlFormatter from './SqlFormatter.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    SqlFormatter,\n  }\n}\n</script>\n\n<style>\nhtml, body {\n  height: 100%;\n  padding: 0;\n  margin: 0;\n}\n\n#app {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\nh3 {\n  text-align: center;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=b67f7a80&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\nimport iView from 'iview'\n\nVue.config.productionTip = false\n\nVue.use(iView)\n\nnew Vue({\n  render: h => h(App),\n}).$mount('#app')\n"],"sourceRoot":""}